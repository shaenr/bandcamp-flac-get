#!/bin/bash
# SCRIPT: bcfg-album2mkv.sh
# AUTHOR: shaenr
# LICENSE: GNU GENERAL PUBLIC LICENSE v3

# This script generates a single flac file from all the flacs in an album zip archive downloaded from bandcamp.
# If the flac files for different songs are not rendered using the same sample rate, the script will find the most
# common sample rate among them to use and convert the smallest amount of files to make them compatible.
# Using that single flac file, an mkv video is generated using the cover art for the visual. The remaining files
# left over after the process are then removed.

# USAGE:
#   bash bcfg-album2mkv.sh infile.zip
#   The $1 parameter should be a zip file of flacs generated by main.py/bcfg package or downloaded manually from bandcamp.

# WARRANTY:
#   my script is provided as is and you should decide for yourself if you know how to use it.

# NOTES:
#   If you do not have a downloads directory specified in the project's .env file, the program will use $HOME.
#
# ALSO THIS ONLY WORKS WITH FLAC ZIPS FOR NOW
##############################################################################################

# LOCAL FUNCTIONS
function cleanup() {
#$MY_TMP_DIR is a temporary dir created by my script
  DOWNLOAD_PATH="$(cat "./utils/bcfg-download_path.txt")"
  [[ "$MY_TMP_DIR" != '' ]] || error "Unable to find $MY_TMP_DIR" 2

  shopt -s nullglob
  TO_CLEAN+=( "$MY_TMP_DIR"/*.flac )
  shopt -u nullglob

 rm -rf "${TO_CLEAN[@]}"                      # I don't know why this doesn't empty the directory...
 rmdir "$MY_TMP_DIR" || ls "$MY_TMP_DIR"
  rm -rf "$MY_TMP_DIR"                        # ...But I guess this will.
  rm "$OUTPUT_FLAC"

  [[ ! -d "$MY_TMP_DIR" ]] && echo "Cleaned up unnecessary files in /tmp directories."
}
trap cleanup EXIT


function get-common-element() {
  local __array=$1
  printf '%s\n' "${__array[@]}" | awk '{
     if (++arr[$0] > max) {
       max=arr[$0];
       ans=$0
     }
   }
   END {print ans}'
}


function stabilize-bitrate() {
  local OLD_FLACS=( "$MY_TMP_DIR"/*.flac )

  declare -A SAMPLE_RATES=( )

  # Get the Sample Rates for each flac.
  for i in "${OLD_FLACS[@]}"; do
    SAMPLE_RATES["$i"]=$(sox --i -r "$i")
  done

  MOST_COMMON_ELEMENT=$(get-common-element "${SAMPLE_RATES[@]}")
  echo "$MOST_COMMON_ELEMENT"

  for i in "${OLD_FLACS[@]}"; do
    FILE_AS_KEY="$i"
    RATE_AS_VALUE="${SAMPLE_RATES[$i]}"
#    echo "FILE: $FILE_AS_KEY"
#    echo "RATE: $RATE_AS_VALUE"
    if [[ "$RATE_AS_VALUE" != "$MOST_COMMON_ELEMENT" ]]; then
      echo "$RATE_AS_VALUE" "is not equal to" "$MOST_COMMON_ELEMENT"
      printf '%s\n' "Attempting to set sample rate of $FILE_AS_KEY to $MOST_COMMON_ELEMENT"
      NEW_FILE_PATH="$FILE_AS_KEY-$MOST_COMMON_ELEMENT.flac"

      sox "$FILE_AS_KEY" -r "$MOST_COMMON_ELEMENT" "$NEW_FILE_PATH"
#      sox --i -r "$NEW_FILE_PATH"
#      sox "$FILE_AS_KEY" -r 48000 "$NEW_FILE_PATH"
      [[ -f "$NEW_FILE_PATH" ]] && {
        echo "Made new file, removing old file";
        rm "$FILE_AS_KEY";
        TO_CLEAN+=( "$FILE_AS_KEY" )
      }
    fi
  done
  TO_CLEAN+=( "$MY_TMP_DIR/*" )
}

function do-ffmpeg() {
    if [[ -f "$COVER_JPG" ]]; then
    ffmpeg -loop 1 -framerate 2 \
           -i "$COVER_JPG" -i "$OUTPUT_FLAC" \
           -c:v libx264 -preset medium -tune stillimage -crf 18 \
           -c:a copy -shortest -pix_fmt yuv420p \
           -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" "$OUTPUT_MKV"
           
#            -vcodec libx264 -y -an
  else
    error "Unable to find cover album art" 2
  fi
}

function main-func() {
  ADJUSTED_RATES_SWITCH=$2
  sox "$MY_TMP_DIR"/*.flac "$OUTPUT_FLAC" || {
    if [[ "$ADJUSTED_RATES_SWITCH" -eq 0 ]]; then
      stabilize-bitrate "$"
      do-ffmpeg
      return
    fi
  }
  do-ffmpeg

}


function debug() {
  echo "MY_TMP_DIR= $MY_TMP_DIR"
  echo "OUTPUT_FLAC= $OUTPUT_FLAC" && file "$OUTPUT_FLAC"
  echo "OUTPUT_MKV= $OUTPUT_MKV" && file "$OUTPUT_MKV"
  echo "DOWNLOAD_PATH= $DOWNLOAD_PATH"
  echo "TO_CLEAN=" "${TO_CLEAN[@]}"
  echo "SAMPLE_RATES=" "${SAMPLE_RATES[@]}"
  echo "OLD_FLACS=" "${OLD_FLACS[@]}"
  for i in "$MY_TMP_DIR"/*.flac; do sox --i -r "$i"; echo "$i"; echo; done
#   ls -l "$MY_TMP_DIR"
}

##############################################################################################

# MAIN
DOWNLOAD_PATH="$(cat "./utils/bcfg-download_path.txt")"
source "./bcfg-common.sh" || error "Can't find my bcfg-common.sh; Try executing from the bcfg project directory." 2
#source "./install_linux.sh" || error "Can't find my install_linux.sh; Try executing from the bcfg project directory." 2


TO_CLEAN=( )
MY_TMP_DIR="$(mktemp -d)"
OUTPUT_FLAC=$DOWNLOAD_PATH/$(printf '%s' "output-" "$(filename -r  "$1")" ".flac")
OUTPUT_MKV=$DOWNLOAD_PATH/$(printf '%s' "$(filename -r  "$1")" .mkv)
COVER_JPG="$MY_TMP_DIR/cover.jpg"

sanity-checks

unzip -j "$1" -d "$MY_TMP_DIR" || error "Unable to run the unzip command" 2


[[ -f "$COVER_JPG" ]] || COVER_JPG="$MY_TMP_DIR/cover.png"
[[ -f "$COVER_JPG" ]] || error "Can't find cover album art." 2

main-func "$1" 0

cleanup

echo "Your mkv file is ready here:"
echo "$OUTPUT_MKV"

